# DLGAdmin GitLab CI Configurations

# Stage Definitions
# :setup: will include manual jobs used to initialize db an other services
#   TODO: not currently in use
# :deploy_staging: will include jobs used in the deployment of the app to the
#   staging environment
# :deploy_production: will include jobs used in the deployment of the app to the
#   production environment
# :manual_actions: will include jobs that can be run any time after setup and
#   deployment
stages:
  #  - setup
  - dependency_scan
  - setup_db_solr
  - setup_web_and_test
  - deconstruct
  - deploy_staging
  - deploy_production
  - push


# Dependency Scan
# Run Bundler Audit on the gemfile for staging/master deployment
bundler_audit:
  stage: dependency_scan
  only:
    - staging
    - master
  script:
    - bundle audit check --update
  environment:
    name: dependency_scan
  tags:
    - shell

# Setup PG and Solr containers to support test runner
setup_db_solr:
  stage: setup_db_solr
  except:
    - prod
    - staging
  script:
    - docker network create meta_testing_${CI_PIPELINE_ID}
    - docker run -d --name solr_${CI_PIPELINE_ID} --expose 8983 -v `pwd`:/data -w /data --network meta_testing_${CI_PIPELINE_ID} --network-alias=solr --entrypoint "/bin/bash" solr:6 /data/provision/solr-entrypoint.sh
    - docker run --name db_${CI_PIPELINE_ID} --expose 5432 --network meta_testing_${CI_PIPELINE_ID} --network-alias=db -d postgres
    - docker run --name redis_${CI_PIPELINE_ID} --expose 6379 --network meta_testing_${CI_PIPELINE_ID} --network-alias=redis -d redis:5
    - docker ps
  tags:
    - shell

# Setup Web container to run RSpec tests
setup_web_and_test:
  stage: setup_web_and_test
  except:
    - prod
    - staging
  script:
    - docker run -d --name web_${CI_PIPELINE_ID} -v `pwd`:/code -w /code --network meta_testing_${CI_PIPELINE_ID} --network-alias=web --entrypoint "/bin/bash" ruby:2.4.5 /code/provision/web-entrypoint.sh && docker attach web_${CI_PIPELINE_ID}
  tags:
    - shell

# Teardown containers on shell runner
deconstruct:
  stage: deconstruct
  except:
    - prod
    - staging
  script:
    - docker rm -f solr_${CI_PIPELINE_ID} db_${CI_PIPELINE_ID} web_${CI_PIPELINE_ID} redis_${CI_PIPELINE_ID}
    - docker network rm meta_testing_${CI_PIPELINE_ID}
  when: always
  tags:
    - shell


# Deploy To Staging
# This job copies app code and secrets to staging machine, installs gems,
# runs any database migrations, deploys assets and restarts passenger. Resque
# workers are also killed and restarted so be careful not to run this when
# workers are working.
deploy_to_staging:
  stage: deploy_staging
  only:
    - staging
  script:
    - cd /deploy/meta
    - git pull
    - bundle install --deployment
    - RAILS_ENV=staging bundle exec rake db:migrate --trace
    - RAILS_ENV=staging bundle exec rake assets:precompile --trace
    - passenger-config restart-app /app/meta
    - ./restart_workers_staging.sh
  environment:
    name: staging
  tags:
    - meta-staging-shell

# Deploy To Production
# This job copies app code and secrets to PRODUCTION machine, installs gems,
# runs any database migrations, deploys assets and restarts passenger. Resque
# workers are also killed and restarted so be careful not to run this when
# workers are working.
deploy_to_production:
  stage: deploy_production
  only:
    - master
  script:
    - cd /deploy/meta
    - git pull
    - bundle install --deployment
    - RAILS_ENV=production bundle exec rake db:migrate --trace
    - RAILS_ENV=production bundle exec rake assets:precompile --trace
    - passenger-config restart-app /app/meta
    - ./restart_workers_production.sh
  environment:
    name: production
  tags:
    - metaweb2-shell
